Let S be a sequence of numbers. Design an algorithm that finds the longest subsequence of S, named S', which increases up to some element and then becomes decreasing (if possible). 

Example 1: S: 1,5, 3, 12, 19, 6, 11, 10,28, 13, 3.  Then  S'= 1,3,12,19,28, 13,3 

Example 2: S: 1,2,4,3,5,6,7,8,9,10   Then S' = 1,2,3,5,6,7,8,9,10. 

Solution:
    Find lis and lds, then combine

    #Initialize values
    n = len(S)
    LIS = []
    for i in range(n+1):
        LIS.append(1)
    
    for i in range(1 , n):
        for j in range(0 , i):
            if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)):
                lis[i] = lis[j] + 1
    
    #Initialize values
    LDS = []
    for i in range(n+1):
        LDS.append(1)
    
    for i in reversed(range(n-1)):
        for j in reversed(range(i-1 ,n)):
            if(arr[i] > arr[j] and LDS[i] < LDS[j] + 1):
                LDS[i] = LDS[j] + 1 
    
    #Initialize max, M
    M = LIS[0] + LDS[0] -1

    for i in range(1, n):
        maximum = max((lis[i] + lds[i]-1), maximum)