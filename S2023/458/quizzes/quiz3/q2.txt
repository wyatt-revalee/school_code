Let S be a sequence over alphabet {A, C, G, T}.
Design an algorithm that finds a longest subsequence of S which is a palindrome.

Solution:

n = len(S)
for i in range(1, n):
    M[i][i] = true

for j in range(1, n-1):
    for i in range(1, n-j):
    if(S[i] == S[i+j])
            M[i][i+j] = M[i+1][i+j-1]+2
        else
            M[i][i+j] = max(M[i+1][i+j], M[i][i+j-1])